package com.jaysan1292.project.c3062.db;

import com.jaysan1292.project.c3062.WebAppCommon;
import com.jaysan1292.project.c3062.util.PlaceholderContent;
import com.jaysan1292.project.common.data.Comment;
import com.jaysan1292.project.common.data.Post;
import com.jaysan1292.project.common.data.Program;
import com.jaysan1292.project.common.data.User;
import com.jaysan1292.project.common.security.UserPasswordPair;
import org.apache.commons.dbutils.DbUtils;
import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.lang3.time.StopWatch;
import org.intellij.lang.annotations.Language;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Set;

/**
 * Created with IntelliJ IDEA.
 * Date: 12/11/12
 * Time: 5:34 PM
 *
 * @author Jason Recillo
 */
public class DatabaseInitializer {
    private static boolean _initialized;

    private DatabaseInitializer() {}

    public static void initialize() {
        if (_initialized) throw new IllegalStateException("Database already initialized!");

        Connection conn = null;
        try {
            try {
                Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
            } catch (ClassNotFoundException ignored) {}

            //TODO: Foreign key constraints
            StopWatch watch = new StopWatch(); watch.start();
            WebAppCommon.log.info("Initializing database...");
            WebAppCommon.log.info("Creating tables");
            conn = DriverManager.getConnection("jdbc:derby:" + BaseDbManager.DB_NAME + ";create=true");

            //region Table SQL
            @Language("Derby")
            String program =
                    "CREATE TABLE program_t(\n" +
                    "  program_id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 0, INCREMENT BY 1),\n" +
                    "  program_code CHAR(4) NOT NULL,\n" +
                    "  program_name VARCHAR(96) NOT NULL,\n" +
                    "  CONSTRAINT program_pk PRIMARY KEY (program_id)\n" +
                    ')';
            @Language("Derby")
            String user =
                    "CREATE TABLE user_t(\n" +
                    "  user_id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 0, INCREMENT BY 1),\n" +
                    "  first_name VARCHAR(32) NOT NULL,\n" +
                    "  last_name VARCHAR(32) NOT NULL,\n" +
                    "  email VARCHAR(24) NOT NULL,\n" +
                    "  student_number CHAR(9) NOT NULL,\n" + // This is the "username" for logging in
                    "  program_id BIGINT NOT NULL,\n" + // Foreign key to program table
                    "  password CHAR(64) NOT NULL,\n" + // Stored as a 64-character encrypted hash
                    "  CONSTRAINT user_sid UNIQUE (student_number),\n" + // Student number must be unique
                    "  CONSTRAINT user_pk PRIMARY KEY (user_id),\n" +
                    "  CONSTRAINT user_fk FOREIGN KEY (program_id)\n" +
                    "  REFERENCES program_t (program_id))";
            @Language("Derby")
            String post =
                    "CREATE TABLE post_t(\n" +
                    "  post_id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 0, INCREMENT BY 1),\n" +
                    "  post_date DATE NOT NULL,\n" +
                    "  post_author_id BIGINT NOT NULL,\n" + // Foreign key to user table
                    "  post_content LONG VARCHAR NOT NULL,\n" +
                    "  CONSTRAINT post_pl PRIMARY KEY (post_id),\n" +
                    "  CONSTRAINT post_fk FOREIGN KEY (post_author_id)\n" +
                    "  REFERENCES user_t (user_id)\n" +
                    ')';
            @Language("Derby")
            String comment =
                    "CREATE TABLE comment_t(\n" +
                    "  comment_id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 0, INCREMENT BY 1),\n" +
                    "  comment_author_id BIGINT NOT NULL,\n" + // Foreign key to user table
                    "  comment_body LONG VARCHAR NOT NULL,\n" +
                    "  comment_date DATE NOT NULL,\n" +
                    "  post_id BIGINT NOT NULL,\n" + // Foreign key to post table
                    "  CONSTRAINT comment_pk PRIMARY KEY (comment_id),\n" +
                    "  CONSTRAINT comment_fk FOREIGN KEY (post_id)\n" +
                    "  REFERENCES post_t (post_id)\n" +
                    ')';
            //endregion

            //region Create tables
            WebAppCommon.log.trace("Creating program table.");
            try {
                BaseDbManager.RUN.update(conn, program);
            } catch (SQLException e) {
                if (DerbyHelper.tableAlreadyExists(e)) {
                    WebAppCommon.log.trace("Program table already exists! Dropping all rows from table then.");
                    BaseDbManager.RUN.update(conn, "DELETE FROM program_t");
                } else {
                    throw e;
                }
            }

            WebAppCommon.log.trace("Creating user table.");
            try {
                BaseDbManager.RUN.update(conn, user);
            } catch (SQLException e) {
                if (DerbyHelper.tableAlreadyExists(e)) {
                    WebAppCommon.log.trace("User table already exists! Dropping all rows from table then.");
                    BaseDbManager.RUN.update(conn, "DELETE FROM user_t");
                } else {
                    throw e;
                }
            }

            WebAppCommon.log.trace("Creating post table.");
            try {
                BaseDbManager.RUN.update(conn, post);
            } catch (SQLException e) {
                if (DerbyHelper.tableAlreadyExists(e)) {
                    WebAppCommon.log.trace("Post table already exists! Dropping all rows from table then.");
                    BaseDbManager.RUN.update(conn, "DELETE FROM post_t");
                } else {
                    throw e;
                }
            }

            WebAppCommon.log.trace("Creating comment table.");
            try {
                BaseDbManager.RUN.update(conn, comment);
            } catch (SQLException e) {
                if (DerbyHelper.tableAlreadyExists(e)) {
                    WebAppCommon.log.trace("Comment table already exists! Dropping all rows from table then.");
                    BaseDbManager.RUN.update(conn, "DELETE FROM comment_t");
                } else {
                    throw e;
                }
            }
            //endregion

            watch.stop();
            WebAppCommon.log.info(String.format("Initializing database complete! Finished in %s.", watch.toString()));
        } catch (SQLException e) {
            WebAppCommon.log.error("There was an error creating and populating database tables. ABORT ABORT", e);
            throw new RuntimeException(e);
        } finally {
            DbUtils.closeQuietly(conn);
        }

        _initialized = true;
    }

    public static void shutdown() {
        if (!_initialized) throw new IllegalStateException("Database has not been initialized yet!");

        Connection conn = null;
        try {
            // Drop the tables
            WebAppCommon.log.info("Dropping tables...");

            // The order here is important
            String[] drop = {"DROP TABLE comment_t",
                             "DROP TABLE post_t",
                             "DROP TABLE user_t",
                             "DROP TABLE program_t"};

            conn = BaseDbManager.openDatabaseConnection();
            QueryRunner run = new QueryRunner();
            for (String sql : drop) {
                run.update(conn, sql);
            }

            WebAppCommon.log.info("Shutting down database.");
            DriverManager.getConnection("jdbc:derby:" + BaseDbManager.DB_NAME + ";shutdown=true");
        } catch (SQLException e) {
            if ((e.getErrorCode() == 45000) && ("08006".equals(e.getSQLState()))) {
                WebAppCommon.log.info("Database shut down successfully!");
            } else {
                WebAppCommon.log.error("Database did not shut down successfully.", e);
            }
        } finally {
            DbUtils.closeQuietly(conn);
        }

        _initialized = false;
    }

    public static void saveContentToDatabase() {
        if (!_initialized) throw new IllegalStateException("Database must be initialized first!");

        Connection conn = null;
        try {
            conn = BaseDbManager.openDatabaseConnection();

            QueryRunner runner = new QueryRunner();
            String query;

            /*
                program_id
                program_code
                program_name
             */
            query = "INSERT INTO program_t (program_id, program_code, program_name) VALUES (?, ?, ?)";
            WebAppCommon.log.info("Saving programs to database.");
            for (Program program : Program.AllPrograms.values()) {
                runner.update(conn, query,
                              program.getId(),
                              program.getProgramCode(),
                              program.getProgramName());
            }

            Set<User> users = PlaceholderContent.Users;
            Set<UserPasswordPair> userPasswords = PlaceholderContent.UserPasswords;
            /*
                user_id
                first_name
                last_name
                email
                student_number
                program_id
                password
             */
            assert users.size() == userPasswords.size();
            query = "INSERT INTO user_t (user_id, first_name, last_name, email, student_number, program_id, password) VALUES (?, ?, ?, ?, ?, ?, ?)";
            WebAppCommon.log.info("Saving users to database.");
            for (User user : users) {
                UserPasswordPair up = PlaceholderContent.getPasswordPair(user);
                runner.update(conn, query,
                              user.getId(),
                              user.getFirstName(),
                              user.getLastName(),
                              user.getEmail(),
                              user.getStudentNumber(),
                              user.getProgram().getId(),
                              up.getPassword());
            }

            Set<Post> posts = PlaceholderContent.Posts;
            /*
                post_id
                post_date
                post_author_id
                post_content
             */
            query = "INSERT INTO post_t (post_id, post_date, post_author_id, post_content) VALUES (?, ?, ?, ?)";
            WebAppCommon.log.info("Saving posts to database.");
            for (Post post : posts) {
                runner.update(conn, query,
                              post.getId(),
                              post.getPostDate(),
                              post.getPostAuthor().getId(),
                              post.getPostContent());
            }

            Set<Comment> comments = PlaceholderContent.Comments;
            /*
                comment_id
                comment_author_id
                comment_body
                comment_date
                post_id
             */
            query = "INSERT INTO comment_t (comment_id, comment_author_id, comment_body, comment_date, post_id) VALUES (?, ?, ?, ?, ?)";
            WebAppCommon.log.info("Saving comments to database.");
            for (Comment comment : comments) {
                runner.update(conn, query,
                              comment.getId(),
                              comment.getCommentAuthor().getId(),
                              comment.getCommentBody(),
                              comment.getCommentDate(),
                              comment.getParentPostId());
            }
        } catch (SQLException e) {
            WebAppCommon.log.error("Error saving content to database, ABORT ABORT");
            throw new RuntimeException(e);
        } finally {
            DbUtils.closeQuietly(conn);
        }
    }
}

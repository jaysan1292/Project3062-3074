package com.jaysan1292.project.c3062.db;

import com.jaysan1292.project.c3062.WebAppCommon;
import org.apache.commons.dbutils.DbUtils;
import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.io.FileDeleteStrategy;
import org.apache.commons.lang3.time.StopWatch;
import org.intellij.lang.annotations.Language;

import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

/**
 * Created with IntelliJ IDEA.
 * Date: 12/11/12
 * Time: 5:34 PM
 *
 * @author Jason Recillo
 */
public class DatabaseInitializer {
    private static boolean _initialized;

    private DatabaseInitializer() {}

    public static void initialize() {
        if (_initialized) throw new IllegalStateException("Database already initialized!");

        Connection conn = null;
        try {
            try {
                Class.forName("org.apache.derby.jdbc.EmbeddedDriver");
            } catch (ClassNotFoundException ignored) {}

            StopWatch watch = new StopWatch(); watch.start();
            WebAppCommon.log.info("Initializing database...");
            WebAppCommon.log.info("Creating tables");
            String connectUrl = BaseDbManager.CONNECT_URL + ";create=true";
            WebAppCommon.log.trace(connectUrl);
            conn = DriverManager.getConnection(connectUrl);

            //region Table SQL
            @Language("Derby")
            String program =
                    "CREATE TABLE program_t(\n" +
                    "  program_id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 0, INCREMENT BY 1),\n" +
                    "  program_code CHAR(4) NOT NULL,\n" +
                    "  program_name VARCHAR(96) NOT NULL,\n" +
                    "  CONSTRAINT program_pk PRIMARY KEY (program_id)\n" +
                    ')';
            @Language("Derby")
            String user =
                    "CREATE TABLE user_t(\n" +
                    "  user_id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 0, INCREMENT BY 1),\n" +
                    "  first_name VARCHAR(32) NOT NULL,\n" +
                    "  last_name VARCHAR(32) NOT NULL,\n" +
                    "  email VARCHAR(24) NOT NULL,\n" +
                    "  student_number CHAR(9) NOT NULL,\n" + // This is the "username" for logging in
                    "  program_id BIGINT NOT NULL,\n" + // Foreign key to program table
                    "  password CHAR(64) NOT NULL,\n" + // Stored as a 64-character encrypted hash
                    "  CONSTRAINT user_sid UNIQUE (student_number),\n" + // Student number must be unique
                    "  CONSTRAINT user_pk PRIMARY KEY (user_id),\n" +
                    "  CONSTRAINT user_fk FOREIGN KEY (program_id)\n" +
                    "  REFERENCES program_t (program_id))";
            @Language("Derby")
            String post =
                    "CREATE TABLE post_t(\n" +
                    "  post_id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 0, INCREMENT BY 1),\n" +
                    "  post_date BIGINT NOT NULL,\n" +
                    "  post_author_id BIGINT NOT NULL,\n" + // Foreign key to user table
                    "  post_content LONG VARCHAR NOT NULL,\n" +
                    "  CONSTRAINT post_pl PRIMARY KEY (post_id),\n" +
                    "  CONSTRAINT post_fk FOREIGN KEY (post_author_id)\n" +
                    "  REFERENCES user_t (user_id)\n" +
                    ')';
            @Language("Derby")
            String comment =
                    "CREATE TABLE comment_t(\n" +
                    "  comment_id BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY (START WITH 0, INCREMENT BY 1),\n" +
                    "  comment_author_id BIGINT NOT NULL,\n" + // Foreign key to user table
                    "  comment_body LONG VARCHAR NOT NULL,\n" +
                    "  comment_date BIGINT NOT NULL,\n" +
                    "  post_id BIGINT NOT NULL,\n" + // Foreign key to post table
                    "  CONSTRAINT comment_pk PRIMARY KEY (comment_id),\n" +
                    "  CONSTRAINT comment_fk FOREIGN KEY (post_id)\n" +
                    "  REFERENCES post_t (post_id),\n" +
                    "  CONSTRAINT comment_author_fk FOREIGN KEY (comment_author_id)" +
                    "  REFERENCES user_t (user_id)" +
                    ')';
            //endregion

            //region Create tables
            WebAppCommon.log.trace("Creating program table.");
            BaseDbManager.RUN.update(conn, program);

            WebAppCommon.log.trace("Creating user table.");
            BaseDbManager.RUN.update(conn, user);

            WebAppCommon.log.trace("Creating post table.");
            BaseDbManager.RUN.update(conn, post);

            WebAppCommon.log.trace("Creating comment table.");
            BaseDbManager.RUN.update(conn, comment);
            //endregion

            watch.stop();
            WebAppCommon.log.info(String.format("Initializing database complete! Finished in %s.", watch.toString()));
        } catch (SQLException e) {
            WebAppCommon.log.error("There was an error creating and populating database tables. ABORT ABORT", e);
            _initialized = true; // shutdown() expects _initialized to be true
            shutdown();
            System.exit(-1);
        } finally {
            DbUtils.closeQuietly(conn);
        }

        _initialized = true;
    }

    public static void shutdown() {
        if (!_initialized) throw new IllegalStateException("Database has not been initialized yet!");

        Connection conn = null;
        try {
            // Drop the tables
            WebAppCommon.log.info("Dropping tables...");

            // The order here is important
            String[] drop = {"DROP TABLE comment_t",
                             "DROP TABLE post_t",
                             "DROP TABLE user_t",
                             "DROP TABLE program_t"};

            conn = BaseDbManager.openDatabaseConnection();
            QueryRunner run = new QueryRunner();
            for (String sql : drop) {
                run.update(conn, sql);
            }

            WebAppCommon.log.info("Shutting down database.");
            DriverManager.getConnection(BaseDbManager.CONNECT_URL + ";shutdown=true");
        } catch (SQLException e) {
            if ((e.getErrorCode() == 45000) && ("08006".equals(e.getSQLState()))) {
                WebAppCommon.log.info("Database shut down successfully!");

                try {
                    WebAppCommon.log.info("Cleaning database directory.");
                    FileDeleteStrategy.FORCE.delete(new File(BaseDbManager.DB_NAME));
                    WebAppCommon.log.info("Database directory cleaned successfully!");
                } catch (IOException e1) {
                    WebAppCommon.log.error("There was an error deleting the database directory. Please delete it manually.");
                    WebAppCommon.log.error(e1.getMessage(), e1);
                }
            } else {
                WebAppCommon.log.error("Database did not shut down successfully.", e);
            }
        } finally {
            DbUtils.closeQuietly(conn);
        }

        _initialized = false;
    }
}
